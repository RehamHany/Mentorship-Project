/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.fruits.ecommerce.api;

import com.fruits.ecommerce.model.CartDisplayResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-10-17T23:15:03.663996300+03:00[Africa/Cairo]")
@Validated
@Tag(name = "card", description = "Operations about card")
public interface CardApi {

    /**
     * POST /cards : add product to card
     * customer can add product to his card.
     *
     * @param userId id of user (required)
     * @param productId id of product (required)
     * @return addProductResponse (status code 200)
     *         or User error (status code 403)
     */
    @Operation(
        operationId = "addToCard",
        summary = "add product to card",
        description = "customer can add product to his card.",
        tags = { "card" },
        responses = {
            @ApiResponse(responseCode = "200", description = "addProductResponse", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "403", description = "User error")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/cards",
        produces = { "text/plain", "application/json" }
    )
    
    ResponseEntity<String> _addToCard(
        @NotNull @Parameter(name = "userId", description = "id of user", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "userId", required = true) Long userId,
        @NotNull @Parameter(name = "productId", description = "id of product", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "productId", required = true) Long productId
    );


    /**
     * GET /cards : Get cart
     * Retrieve the cart of customer
     *
     * @param userId id of user (required)
     * @return the cart of customer (status code 200)
     *         or No cart found (status code 404)
     */
    @Operation(
        operationId = "cardsGet",
        summary = "Get cart",
        description = "Retrieve the cart of customer",
        tags = { "card" },
        responses = {
            @ApiResponse(responseCode = "200", description = "the cart of customer", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CartDisplayResponse.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = CartDisplayResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "No cart found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/cards",
        produces = { "application/json", "text/plain" }
    )
    
    ResponseEntity<CartDisplayResponse> _cardsGet(
        @NotNull @Parameter(name = "userId", description = "id of user", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "userId", required = true) Long userId
    );

}
